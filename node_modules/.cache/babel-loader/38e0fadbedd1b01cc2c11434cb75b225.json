{"ast":null,"code":"var _jsxFileName = \"/Users/axiro/Codes/ts/my-app/src/components/Home/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport Header from \"../Header/Header\";\nimport Misc from \"../../hoc/Misc/Misc\";\nimport \"./Home.css\";\nimport CardBox from \"../NewCard/Box\";\nimport Flex from \"../UI/Flex/Flex\";\nimport Grid from \"../UI/Grid/Grid\";\nimport Cards from \"../Cards/Cards\";\nimport * as WORD_TYPES from \"../../store/WordTypes/WordTypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled(Button)`\n  margin: 1rem 0;\n  background-color: #43a047;\n  width: 10rem;\n\n  :hover {\n    background-color: #388e3c;\n  }\n\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n  }\n`;\n_c = StyledButton;\n\nfunction Home() {\n  _s();\n\n  const [word, setWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [wordLanguage, setWordLanguage] = useState('');\n  const [langs, setLangs] = useState([{\n    id: 0,\n    ln: \"English\"\n  }, {\n    id: 1,\n    ln: \"Spanish\"\n  }]);\n  const [words, setWords] = useState([{\n    id: 0,\n    text: \"Versatile\",\n    tran: \"همه‌کاره\",\n    lang: 0,\n    pos: WORD_TYPES.ADJECTIVE\n  }, {\n    id: 1,\n    text: \"Foregoing\",\n    tran: \"قبلی\",\n    lang: 0,\n    pos: WORD_TYPES.NOUN\n  }, {\n    id: 2,\n    text: \"Versatile\",\n    tran: \"همه‌کاره\",\n    lang: 0,\n    pos: WORD_TYPES.NOUN\n  }]);\n\n  const handleSetWord = event => {\n    setWord(event.target.value);\n  };\n\n  const handleSetTranslation = event => {\n    setTranslation(event.target.value);\n  };\n\n  const handleSetWordLanguage = event => {\n    setWordLanguage(event.target.value);\n  };\n\n  const addWordHandler = () => {\n    let newWords = [...words];\n    const id = newWords[newWords.length - 1].id + 1;\n    let lang = 0;\n\n    if (langs.length > 0 && langs) {\n      lang = langs.find(l => l.ln === wordLanguage);\n      console.log(lang);\n      newWords.push({\n        id: id,\n        text: word,\n        tran: translation,\n        lang: 0,\n        pos: WORD_TYPES.ADJECTIVE\n      });\n      setWords(newWords);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Misc, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        direction: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"textPrimary\",\n          gutterBottom: true,\n          children: \"Add a new Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(CardBox, {\n            input: handleSetWord,\n            label: \"Word\",\n            placeholder: \"Write a new word...\",\n            langHandler: handleSetWordLanguage,\n            lang: wordLanguage,\n            langs: langs,\n            isWord: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBox, {\n            input: handleSetTranslation,\n            label: \"Translation\",\n            placeholder: \"Write the translation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          direction: \"row\",\n          align: \"center\",\n          justify: \"center\",\n          children: /*#__PURE__*/_jsxDEV(StyledButton, {\n            variant: \"contained\",\n            color: \"primary\",\n            size: \"large\",\n            onClick: addWordHandler,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Cards, {\n        words: words\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"l00sIADZYtzx7jQgsKy+lIYyhkU=\");\n\n_c2 = Home;\nexport default Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/axiro/Codes/ts/my-app/src/components/Home/Home.tsx"],"names":["React","useState","Button","Container","Typography","styled","Header","Misc","CardBox","Flex","Grid","Cards","WORD_TYPES","StyledButton","Home","word","setWord","translation","setTranslation","wordLanguage","setWordLanguage","langs","setLangs","id","ln","words","setWords","text","tran","lang","pos","ADJECTIVE","NOUN","handleSetWord","event","target","value","handleSetTranslation","handleSetWordLanguage","addWordHandler","newWords","length","find","l","console","log","push"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport Header from \"../Header/Header\";\nimport Misc from \"../../hoc/Misc/Misc\";\nimport \"./Home.css\";\nimport CardBox from \"../NewCard/Box\";\nimport Flex from \"../UI/Flex/Flex\";\nimport Grid from \"../UI/Grid/Grid\";\nimport Cards from \"../Cards/Cards\";\nimport * as WORD_TYPES from \"../../store/WordTypes/WordTypes\";\n\nconst StyledButton = styled(Button)`\n  margin: 1rem 0;\n  background-color: #43a047;\n  width: 10rem;\n\n  :hover {\n    background-color: #388e3c;\n  }\n\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nfunction Home() {\n  const [word, setWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [wordLanguage, setWordLanguage] = useState('');\n  const [langs, setLangs] = useState([\n    {\n      id: 0,\n      ln: \"English\"\n    },\n    {\n      id: 1,\n      ln: \"Spanish\"\n    },\n  ]);\n  const [words, setWords] = useState([\n    {\n      id: 0,\n      text: \"Versatile\",\n      tran: \"همه‌کاره\",\n      lang: 0,\n      pos: WORD_TYPES.ADJECTIVE\n    },\n    {\n      id: 1,\n      text: \"Foregoing\",\n      tran: \"قبلی\",\n      lang: 0,\n      pos: WORD_TYPES.NOUN\n    },\n    {\n      id: 2,\n      text: \"Versatile\",\n      tran: \"همه‌کاره\",\n      lang: 0,\n      pos: WORD_TYPES.NOUN\n    },\n  ]);\n\n  const handleSetWord = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setWord(event.target.value as string);\n  };\n\n  const handleSetTranslation = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTranslation(event.target.value as string);\n  };\n\n  const handleSetWordLanguage = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setWordLanguage(event.target.value as string);\n  };\n\n  const addWordHandler = () => {\n    let newWords = [...words];\n    const id = newWords[newWords.length - 1].id + 1;\n    let lang: object | number | undefined = 0;\n    type Lang = {\n      id: number;\n      ln: string;\n    }\n    if (langs.length > 0 && langs) {\n      lang = langs.find((l: Lang) => l.ln === wordLanguage);\n\n      console.log(lang);\n\n      newWords.push({\n        id: id,\n        text: word,\n        tran: translation,\n        lang: 0,\n        pos: WORD_TYPES.ADJECTIVE\n      })\n      setWords(newWords);\n    }\n  }\n\n  return (\n    <Misc>\n      <Header/>\n      <Container>\n        <Flex direction=\"col\">\n          <Typography\n            variant=\"h5\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Add a new Card\n          </Typography>\n          <br/>\n          <Grid>\n            <CardBox\n              input={handleSetWord}\n              label=\"Word\"\n              placeholder=\"Write a new word...\"\n              langHandler={handleSetWordLanguage}\n              lang={wordLanguage}\n              langs={langs}\n              isWord\n            />\n            <CardBox\n              input={handleSetTranslation}\n              label=\"Translation\"\n              placeholder=\"Write the translation...\"\n            />\n          </Grid>\n          <Flex\n            direction=\"row\"\n            align=\"center\"\n            justify=\"center\"\n          >\n            <StyledButton\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={addWordHandler}\n            >\n              Add\n            </StyledButton>\n          </Flex>\n        </Flex>\n\n        <Cards words={words}/>\n      </Container>\n    </Misc>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}